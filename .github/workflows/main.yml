name: Deploy to development or staging

on:
  push:
    branches: [development, staging]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test
    uses: ./.github/workflows/test.yml

  prepare:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set_env.outputs.env_name }}
    steps:
      - id: set_env
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"
          if [[ "$BRANCH" == "development" ]]; then
            echo "env_name=development" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
          else
            echo "env_name=unknown" >> $GITHUB_OUTPUT
          fi

  policy-check:
    name: Check file changes
    runs-on: ubuntu-latest
    needs: [test, prepare]
    outputs:
      boundary_changed: ${{ steps.check.outputs.boundary_changed }}
      deploy_changed: ${{ steps.check.outputs.deploy_changed }}
      policy_changed: ${{ steps.check.outputs.policy_changed }}
      workflow_changed: ${{ steps.check.outputs.workflow_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - id: check
        run: |
          if [ -z "${{ github.event.before }}" ]; then
            git fetch origin main:main
            CHANGED_FILES=$(git diff --name-only origin/main...${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi

          POLICY_BOUNDARY="infrastructure/iam_resources/ga_permission_boundry.json"
          POLICY_DEPLOY="infrastructure/iam_resources/ga_deployment_policy.json"
          WORKFLOW_DIR=".github/workflows/"

          echo "boundary_changed=$(echo "$CHANGED_FILES" | grep -qx "$POLICY_BOUNDARY" && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "deploy_changed=$(echo "$CHANGED_FILES" | grep -qx "$POLICY_DEPLOY" && echo true || echo false)" >> $GITHUB_OUTPUT

          policy_changed=false
          for file in $CHANGED_FILES; do
            if [[ "$file" != "$POLICY_BOUNDARY" && "$file" != "$POLICY_DEPLOY" && "$file" == infrastructure/iam_resources/* ]]; then
              policy_changed=true
              break
            fi
          done
          echo "policy_changed=$policy_changed" >> $GITHUB_OUTPUT

          echo "workflow_changed=$(echo "$CHANGED_FILES" | grep -q "^$WORKFLOW_DIR" && echo true || echo false)" >> $GITHUB_OUTPUT

  approval:
    name: Require manual approval
    if: needs.policy-check.outputs.policy_changed == 'true' || needs.policy-check.outputs.workflow_changed == 'true' || needs.policy-check.outputs.boundary_changed == 'true' || needs.policy-check.outputs.deploy_changed == 'true'
    runs-on: ubuntu-latest
    needs: [policy-check]
    environment: policy-update
    steps:
      - name: Awaiting approval
        run: echo "Manual approval required due to workflow or policy changes."

  policy-update:
    name: Update IAM Policy Boundary
    needs: [approval]
    if: needs.policy-check.outputs.boundary_changed == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      POLICY_NAME: "MyGitHubCreatedPolicy_withoutCDK"
      POLICY_DIR: "infrastructure/iam_resources/ga_permission_boundry.json"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/new-integration-deployment-role

      - name: Create or update permission boundary
        run: |
          POLICY_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:policy/${POLICY_NAME}"
          if aws iam get-policy --policy-arn "$POLICY_ARN" >/dev/null 2>&1; then
            TOTAL_VERSIONS=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "length(Versions)" --output text)
            if [ "$TOTAL_VERSIONS" -ge 5 ]; then
              VERSION_TO_DELETE=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "Versions[?IsDefaultVersion==\`false\`]|[0].VersionId" --output text)
              aws iam delete-policy-version --policy-arn "$POLICY_ARN" --version-id "$VERSION_TO_DELETE"
            fi
            aws iam create-policy-version --policy-arn "$POLICY_ARN" --policy-document file://$POLICY_DIR --set-as-default
          else
            aws iam create-policy --policy-name "$POLICY_NAME" --policy-document file://$POLICY_DIR

  BootStrap:
    name: Bootstrap CDK
    runs-on: ubuntu-latest
    needs: [policy-update]
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      POLICY_NAME: "MyGitHubCreatedPolicy_withoutCDK"
      ENVIRONMENT: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install AWS CDK
        run: npm install -g aws-cdk
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-plugin-export
          poetry install

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/new-integration-deployment-role

      - name: Check if CDK is already bootstrapped
        id: check_bootstrap
        if: always()
        run: |
          STACK_NAME="new-integration-9e4b832cf-cdk-toolkit"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "already_bootstrapped=true" >> $GITHUB_OUTPUT
          else
            echo "already_bootstrapped=false" >> $GITHUB_OUTPUT
          fi

      - name: Bootstrap CDK
        if: steps.check_bootstrap.outputs.already_bootstrapped == 'false'
        run: |
          cdk bootstrap aws://${{ env.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
            --bootstrap-permissions-boundary arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:policy/${{ env.POLICY_NAME }} \
            --qualifier 9e4b832cf \
            --toolkit-stack-name new-integration-${{ needs.prepare.outputs.env_name }}-cdk-toolkit


  Deploy-policy-update:
    name: Update IAM deploy Policy
    needs: [BootStrap]
    if: always() && needs.policy-check.outputs.deploy_changed == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      POLICY_NAME: "new-integration-cdk-deployment-policy"
      POLICY_DIR: "infrastructure/iam_resources/ga_deployment_policy.json"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/new-integration-deployment-role

      - name: Create or update deploy policy
        run: |
          POLICY_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:policy/${POLICY_NAME}"
          if aws iam get-policy --policy-arn "$POLICY_ARN" >/dev/null 2>&1; then
            TOTAL_VERSIONS=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "length(Versions)" --output text)
            if [ "$TOTAL_VERSIONS" -ge 5 ]; then
              VERSION_TO_DELETE=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "Versions[?IsDefaultVersion==\`false\`]|[0].VersionId" --output text)
              aws iam delete-policy-version --policy-arn "$POLICY_ARN" --version-id "$VERSION_TO_DELETE"
            fi
            aws iam create-policy-version --policy-arn "$POLICY_ARN" --policy-document file://$POLICY_DIR --set-as-default
          else
            aws iam create-policy --policy-name "$POLICY_NAME" --policy-document file://$POLICY_DIR
            fi

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
    - test
    - prepare
    - policy-check
    - approval
    - policy-update
    - BootStrap
    - Deploy-policy-update
    if: always()  # Ensures this job runs regardless of earlier job outcomes
    env:
      ENVIRONMENT: ${{ github.ref_name }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      POLICY_NAME: "MyGitHubCreatedPolicy_withoutCDK"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install AWS CDK
        run: npm install -g aws-cdk
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-plugin-export
          poetry install

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/new-integration-deployment-role

      - name: Deploy app
        run: ./scripts/deploy.sh

      - name: Post-deployment
        run: poetry run python scripts/deployment/post_deploy.py
